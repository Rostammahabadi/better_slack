Production ready application
Adhere to Vue 3 best practices
Always review your code after writing it to make sure it functions as expected
All of the CSS you write should account for different screen sizes
Never add a new file unless directed by the user
The project uses a realtime socket connection to send and receive messages via the socketService.js file
The project manages state with vuex and the store/modules/ files
The project uses a chatbot that is activated by the user and sends messages to the chatbot via the socketService.js file
The chatbot sends messages back to the user via the socketService.js file
The user can send messages to the chatbot and the chatbot will respond to the user
The user can send messages to a channel and the chatbot will respond to the user
The user can send messages to a conversation and the chatbot will respond to the user
The user can send messages to a direct message and the chatbot will respond to the user
My backend models look like this:

export interface IMessage extends Document {
  _id: Types.ObjectId;
  content: string;
  threadId?: Types.ObjectId;
  type: MessageType;
  channelId?: Types.ObjectId;
  conversationId?: Types.ObjectId;
  user: Types.ObjectId;
  attachments: Array<{
    url: string;
    type: string;
    name: string;
  }>;
  status: 'sent' | 'delivered' | 'read';
  reactions?: Array<{
    emoji: string;
    userId: Types.ObjectId;
  }>;
  edited: boolean;
  editHistory?: Array<{
    content: string;
    editedAt: Date;
  }>;
  createdAt: Date;
  updatedAt: Date;
}
export interface IConversation extends Document {
  participants: Types.ObjectId[];
  messages: Types.ObjectId[];
  lastMessage?: Types.ObjectId;
  lastMessageAt: Date;
  messageCount: number;
  createdAt: Date;
  updatedAt: Date;
  type: string;
}

export interface IChannel extends Document {
  name: string;
  workspaceId: mongoose.Types.ObjectId;
  type: 'public' | 'private';
  members: Array<{
    userId: mongoose.Types.ObjectId;
    role: 'admin' | 'member';
  }>;
  description?: string;
  createdBy: mongoose.Types.ObjectId;
  messages?: mongoose.Types.ObjectId[];
  createdAt: Date;
  updatedAt: Date;
}
export interface IUser extends Document, IUserMethods {
  _id: Types.ObjectId;
  auth0Id: string;
  email: string;
  password: string;
  verificationToken?: string;
  isVerified: boolean;
  resetPasswordToken?: string;
  resetPasswordExpires?: Date;
  failedLoginAttempts: number;
  lockUntil?: Date;
  username: string;
  displayName?: string;
  avatarUrl?: string;
  accountStatus: 'active' | 'inactive' | 'suspended';
  userStatus?: IUserStatus;
  isOnline: boolean;
  lastSeen: Date;
  workspaces: Types.ObjectId[];
  theme: 'dark' | 'light';
  notificationPreferences: NotificationPreferences;
  createdAt: Date;
  updatedAt: Date;
}